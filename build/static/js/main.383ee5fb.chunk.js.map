{"version":3,"sources":["state/dataReducer.js","components/Chart.js","components/App.js","state/store.js","index.js"],"names":["initialState","dataPoints","error","setError","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","wrap","_context","prev","next","type","setTimeout","stop","_x","apply","this","arguments","dataReducer","state","length","undefined","action","objectSpread","concat","toConsumableArray","Chart","series","name","data","props","sensor1","map","s","x","date","y","sensor2","sensor3","sensor4","react_default","createElement","react_apexcharts_min_default","options","title","text","align","margin","style","fontSize","yaxis","seriesName","axisTicks","show","axisBorder","color","labels","tooltip","enabled","fixed","position","offsetY","offsetX","legend","horizontalAlign","showForNullSeries","width","Component","ConnectedChart","connect","e","App","getAllDataPoints","setInterval","console","log","Date","_this","fetchNewData","_this2","handleFetchNewDataButtonClick","_callee2","_context2","handleGetDataPointsButtonClick","_ref2","_callee3","_context3","className","Button_default","variant","size","onClick","components_Chart","mapDispatchToProps","axios","get","sent","abrupt","t0","_x2","_ref3","_x3","ConnectedApp","reducer","combineReducers","store","createStore","applyMiddleware","thunk","render","ReactDOM","es","components_App","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.383ee5fb.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst initialState = { dataPoints: [], error: null };\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n  case 'SET_ALL_DATA_POINTS':\n    return {\n      ...state,\n      dataPoints: action.dataPoints\n    };\n\n  case 'SET_NEW_DATA_POINT':\n    return {\n      ...state,\n      dataPoints: [...state.dataPoints, action.dataPoints]\n    };\n\n  case 'SET_ERROR':\n    return {\n      ...state,\n      error: action.error\n    };\n\n  default:\n    return state;\n  }\n};\n\nexport const setError = (error) => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'SET_ERROR',\n      error\n    });\n\n    setTimeout(() => {\n      dispatch({\n        type: 'SET_ERROR',\n        error: null\n      }\n      );\n    }, 4000);\n  };\n};\n\n\nexport const fetchNewData = () => {\n  return async (dispatch) => {\n    try {\n      const data = await axios.get('/api/fetch_new_data');\n\n      if (data.data === 'data point already saved') {\n        setError('data point already saved');\n        return;\n      }\n\n      dispatch({\n        type: 'SET_NEW_DATA_POINT',\n        dataPoints: data.data\n      });\n    } catch (err) {\n      setError(err);\n    }\n  };\n};\n\nexport const getAllDataPoints = () => {\n  return async (dispatch) => {\n    try {\n      const data = await axios.get('/api/get_data_points');\n\n      dispatch({\n        type: 'SET_ALL_DATA_POINTS',\n        dataPoints: data.data\n      });\n    } catch (err) {\n      setError(err);\n    }\n  };\n};\n\nexport default dataReducer;","import React, { Component } from 'react';\nimport ApexChart from 'react-apexcharts';\nimport { connect } from 'react-redux';\n\nclass Chart extends Component {\n  render() {\n    const options = {\n      title: {\n        text: 'Data Points',\n        align: 'center',\n        margin: 20,\n        style: {\n          fontSize:  '20px'\n        }\n      },\n      yaxis: {\n        seriesName: 'dataPoints',\n        axisTicks: {\n          show: true,\n        },\n        axisBorder: {\n          show: true,\n          color: '#662E9B',\n        },\n        labels: {\n          style: {\n            color: '#662E9B',\n          }\n        },\n        tooltip: {\n          enabled: true\n        }\n      },\n      // xaxis: {\n      //   axisTicks: {\n      //     show: true\n      //   },\n      //   tickPlacement: 'on'\n      // },\n      tooltip: {\n        fixed: {\n          enabled: true,\n          position: 'topLeft', // topRight, topLeft, bottomRight, bottomLeft\n          offsetY: 30,\n          offsetX: 60\n        },\n        // x: { formatter: (seriesName) => 'Year: ' + seriesName }\n      },\n      legend: {\n        position: 'top',\n        horizontalAlign: 'right',\n        offsetX: 40,\n        showForNullSeries: false,\n      }\n    };\n\n    const series = [\n      {\n        name: 'Sensor 1',\n        type: 'line',\n        data: (this.props.sensor1 ? this.props.sensor1.map(s => {\n          return {\n            x: s.date,\n            y: s.data\n          };\n        }) : [])\n      },\n      {\n        name: 'Sensor 2',\n        type: 'line',\n        data: (this.props.sensor2 ? this.props.sensor2.map(s => {\n          return {\n            x: s.date,\n            y: s.data\n          };\n        }) : [])\n      },\n      {\n        name: 'Sensor 3',\n        type: 'line',\n        data: (this.props.sensor3 ? this.props.sensor3.map(s => {\n          return {\n            x: s.date,\n            y: s.data\n          };\n        }) : [])\n      },\n      {\n        name: 'Sensor 4',\n        type: 'line',\n        data: (this.props.sensor4 ? this.props.sensor4.map(s => {\n          return {\n            x: s.date,\n            y: s.data\n          };\n        }) : [])\n      }];\n\n    return (\n      <div>\n        <ApexChart options={options} series={series} type='line' width='700px' />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    sensor1: state.data.dataPoints.map(e => {\n      return {\n        date: e.data.date,\n        data: e.data.sensor1\n      };\n    }),\n    sensor2: state.data.dataPoints.map(e => {\n      return {\n        date: e.data.date,\n        data: e.data.sensor2\n      };\n    }),\n    sensor3: state.data.dataPoints.map(e => {\n      return {\n        date: e.data.date,\n        data: e.data.sensor3\n      };\n    }),\n    sensor4: state.data.dataPoints.map(e => {\n      return {\n        date: e.data.date,\n        data: e.data.sensor4\n      };\n    })\n  };\n};\n\nconst ConnectedChart = connect(mapStateToProps)(Chart);\n\nexport default ConnectedChart;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { fetchNewData, getAllDataPoints } from '../state/dataReducer';\nimport Chart from './Chart';\n\nclass App extends Component {\n\n  async componentDidMount() {\n    await this.props.getAllDataPoints();\n\n    setInterval(() => {\n      console.log('fetching new data at', new Date());\n      // TODO: renderöi milloin dataa on viimeksi fetchattu\n      this.props.fetchNewData();\n    }, 3600000);\n  }\n\n  render() {\n    const handleFetchNewDataButtonClick = async () => {\n      this.props.fetchNewData();\n    };\n\n    const handleGetDataPointsButtonClick = async () => {\n      this.props.getAllDataPoints();\n    };\n\n    return (\n      <div className='App'>\n        <h1>Data visualization</h1>\n\n        <p>This app fetches a new data point from a given api every hour and adds it to the chart.</p>\n\n        <p>These buttons are meant for developing:</p>\n        <Button variant='outlined' size='large' onClick={handleFetchNewDataButtonClick}>Fetch a new data point</Button>\n        <Button variant='outlined' size='large' onClick={handleGetDataPointsButtonClick}>Get all data points</Button>\n\n        <h1>Charts</h1>\n\n        <Chart />\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchNewData,\n  getAllDataPoints\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\n\nexport default ConnectedApp;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport dataReducer from './dataReducer';\n\nconst reducer = combineReducers({\n  data: dataReducer\n});\n\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk)\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'typeface-roboto';\nimport App from './components/App';\nimport store from './state/store';\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nrender();\nstore.subscribe(render);"],"sourceRoot":""}